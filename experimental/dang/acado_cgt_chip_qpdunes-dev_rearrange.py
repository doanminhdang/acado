#!/usr/bin/env python

# Tested with both Python 2.7.6 and Python 3.4.3
#
# This Python code rearrange the source code for testing ACADO
# code generation tool, so that all the source files are put
# under one directory at the same level.
#
# The idea is that when compiling code generated by ACADO for
# embedded platforms, when "make" does not fully function like
# on standard Linux platform, all the source code available in
# one directory would allow the compiler to process the code
# easier.
#
# Here are the steps, tested with this the example in
# acado/examples/code_generation/mpc_mhe/getting_started.cpp.
#
# Example usage:
# Assume the source folder containing generated code is: ~/acado/
# examples/code_generation/mpc_mhe/new_getting_started_qpoases3_export
#
# The target folder is current folder.
#
# ./acado_cgt_chip_qpoases3_rearrange.py /home/dang/acado/
# examples/code_generation/mpc_mhe/new_getting_started_qpoases3_export
#
# Author: Dang Doan
# Date: 2017.02.22

import sys
import os
import glob
from subprocess import call
from os.path import join

# python2:
# print 'Number of arguments:', len(sys.argv), 'arguments.'
# print 'Argument List:', str(sys.argv)

# python3:
# print('Number of arguments:', len(sys.argv), 'arguments.')
# print('Argument List:', str(sys.argv))
# Running "python commandfile.py arg1" yields 2 arguments.
# Running "commandfile.py arg1" also yields 2 arguments.

# call('ls')
# print(str(sys.argv[1]))
# call('ls '+str(sys.argv[1])) # using subprocess call does not work
# os.system('ls '+str(sys.argv[1])) # works ok

# 1. Bring all files inside folder getting_started_export to one folder.

source_dir = str(sys.argv[1])
os.system('cp '+source_dir+'/Makefile .')

for (dirname, dirs, files) in os.walk(source_dir):
    for filename in files:
        if filename.endswith(('.c', '.h', '.cpp', '.hpp', '.ipp')):
            fullfilename = os.path.join(dirname,filename)
            os.system('cp '+fullfilename+' .')

# 2. Modify the Makefile:
objMakefile = open("Makefile", "r")
txtMakefile = objMakefile.read()  # this command reads whole file as a string
# txtMakefile = objMakefile.readlines()  # this command reads lines as a list
objMakefile.close()

# 2.0 fix the bug left from running ACADO code generation in Matlab
txtMakefile = txtMakefile.replace("@MODULE_NAME@", "acado_")
# 2.1. fix the bug left from ACADO code generation with qpDUNES as of 2017.02.22
txtMakefile = txtMakefile.replace("./qpdunes/src/utils.o", "./qpdunes/src/qpdunes_utils.o")
# 2.2. remove the folder structure (change the path in Makefile)
txtMakefile = txtMakefile.replace("/qpdunes/src", "")
txtMakefile = txtMakefile.replace("/qpdunes/include", "")
txtMakefile = txtMakefile.replace("qpdunes/src/", "")
# 2.3. add the objects to compile cpp code from qpSOASES (inside qpDUNES)
txtMakefile = txtMakefile.replace("qpdunes_utils.o \\\n\tacado_integrator.o", "qpdunes_utils.o \\\n\t./stage_qp_solver_qpoases.o \\\n\tBLASReplacement.o \\\n\tBounds.o \\\n\tConstraints.o \\\n\tFlipper.o \\\n\tIndexlist.o \\\n\tLAPACKReplacement.o \\\n\tLoggedSQProblem.o \\\n\tMatrices.o \\\n\tMessageHandling.o \\\n\tOptions.o \\\n\tOQPinterface.o \\\n\tQProblem.o \\\n\tQProblemB.o \\\n\tSolutionAnalysis.o \\\n\tSQProblem.o \\\n\tSubjectTo.o \\\n\tUtils.o \\\n\tacado_integrator.o")

objNewMakefile = open("newMakefile", "w")
objNewMakefile.writelines(txtMakefile)
objNewMakefile.close()

os.system('mv Makefile oldMakefile~')
os.system('mv newMakefile Makefile')

# 3. Modify .h and .c files of qpOASES-3.0beta:
# remove "qp/" in:
# #include <qp/...>
files = glob.glob("*.c")
for file in files:
    objFile = open(file, "r")
    txtFile = objFile.read()
    objFile.close()
    txtFile = txtFile.replace("qp/","")
    objFile = open(file, "w")
    objFile.write(txtFile)
    objFile.close()

files = glob.glob("*.h")
for file in files:
    objFile = open(file, "r")
    txtFile = objFile.read()
    objFile.close()
    txtFile = txtFile.replace("qp/","")
    objFile = open(file, "w")
    objFile.write(txtFile)
    objFile.close()

files = glob.glob("*.hpp")
for file in files:
    objFile = open(file, "r")
    txtFile = objFile.read()
    objFile.close()
    txtFile = txtFile.replace("include/qpOASES/extras/","")
    txtFile = txtFile.replace("qpOASES/extras/","")
    txtFile = txtFile.replace("qpOASES/extras/","")
    txtFile = txtFile.replace("qpOASES/","")
    txtFile = txtFile.replace("qp/","")
    objFile = open(file, "w")
    objFile.write(txtFile)
    objFile.close()

files = glob.glob("*.cpp")
for file in files:
    objFile = open(file, "r")
    txtFile = objFile.read()
    objFile.close()
    txtFile = txtFile.replace("include/qpOASES/extras/","")
    txtFile = txtFile.replace("qpOASES/extras/","")
    txtFile = txtFile.replace("qpOASES/extras/","")
    txtFile = txtFile.replace("qpOASES/","")
    txtFile = txtFile.replace("qp/","")
    objFile = open(file, "w")
    objFile.write(txtFile)
    objFile.close()
